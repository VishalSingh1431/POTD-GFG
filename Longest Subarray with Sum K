If  sum−k exists in the map, it means there is a subarray ending at the current index i whose sum equals k. The starting index of this subarray is the index stored in m[sum - k] + 1.
Compute the length of this subarray: i−m[sum−k]+1.


class Solution {
public:
    int longestSubarray(vector<int>& a, int k) {
        map<int, int> m;
        int ans = 0, sum = 0;
        
        for (int i = 0; i < a.size(); i++) {
            if (m.find(sum) == m.end()) {
                m[sum] = i;
            }
            
            sum += a[i];
            
            if (m.find(sum - k) != m.end()) {
                ans = max(ans, i - m[sum - k] + 1);
            }
        }
        
        return ans;
    }
};
