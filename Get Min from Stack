class Solution {
public:
    stack<int> st;
    unordered_map<int, int> m;
    int mini = INT_MAX;
    Solution() {
        // code here
    }

    // Add an element to the top of Stack
    void push(int x) {
        mini = min(mini, x);
        m[x]++;
        st.push(x);
    }

    // Remove the top element from the Stack
    void pop() {
        if (st.empty())
            return;
        m[st.top()]--;
        if (m[st.top()] == 0)
            m.erase(st.top());
        if (mini == st.top()) {
            mini = INT_MAX;
            for (auto& i : m)
                mini = min(mini, i.first);
        }
        st.pop();
    }

    // Returns top element of the Stack
    int peek() {
        if (st.empty())
            return -1;
        return st.top();
    }

    // Finds minimum element of Stack
    int getMin() { return mini == INT_MAX ? -1 : mini; }
};
